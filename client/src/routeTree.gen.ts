/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlaylistsImport } from './routes/playlists'
import { Route as IndexImport } from './routes/index'
import { Route as PlaylistsIndexImport } from './routes/playlists.index'
import { Route as PlaylistsIdImport } from './routes/playlists.$id'

// Create/Update Routes

const PlaylistsRoute = PlaylistsImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PlaylistsIndexRoute = PlaylistsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlaylistsRoute,
} as any)

const PlaylistsIdRoute = PlaylistsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => PlaylistsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/playlists': {
      id: '/playlists'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsImport
      parentRoute: typeof rootRoute
    }
    '/playlists/$id': {
      id: '/playlists/$id'
      path: '/$id'
      fullPath: '/playlists/$id'
      preLoaderRoute: typeof PlaylistsIdImport
      parentRoute: typeof PlaylistsImport
    }
    '/playlists/': {
      id: '/playlists/'
      path: '/'
      fullPath: '/playlists/'
      preLoaderRoute: typeof PlaylistsIndexImport
      parentRoute: typeof PlaylistsImport
    }
  }
}

// Create and export the route tree

interface PlaylistsRouteChildren {
  PlaylistsIdRoute: typeof PlaylistsIdRoute
  PlaylistsIndexRoute: typeof PlaylistsIndexRoute
}

const PlaylistsRouteChildren: PlaylistsRouteChildren = {
  PlaylistsIdRoute: PlaylistsIdRoute,
  PlaylistsIndexRoute: PlaylistsIndexRoute,
}

const PlaylistsRouteWithChildren = PlaylistsRoute._addFileChildren(
  PlaylistsRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/playlists': typeof PlaylistsRouteWithChildren
  '/playlists/$id': typeof PlaylistsIdRoute
  '/playlists/': typeof PlaylistsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/playlists/$id': typeof PlaylistsIdRoute
  '/playlists': typeof PlaylistsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/playlists': typeof PlaylistsRouteWithChildren
  '/playlists/$id': typeof PlaylistsIdRoute
  '/playlists/': typeof PlaylistsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/playlists' | '/playlists/$id' | '/playlists/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/playlists/$id' | '/playlists'
  id: '__root__' | '/' | '/playlists' | '/playlists/$id' | '/playlists/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlaylistsRoute: typeof PlaylistsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlaylistsRoute: PlaylistsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/playlists"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/playlists": {
      "filePath": "playlists.tsx",
      "children": [
        "/playlists/$id",
        "/playlists/"
      ]
    },
    "/playlists/$id": {
      "filePath": "playlists.$id.tsx",
      "parent": "/playlists"
    },
    "/playlists/": {
      "filePath": "playlists.index.tsx",
      "parent": "/playlists"
    }
  }
}
ROUTE_MANIFEST_END */
