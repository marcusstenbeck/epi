// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.2 

import { Options } from "@hey-api/client-fetch";
import { UseQueryOptions, useSuspenseQuery } from "@tanstack/react-query";
import { playlistsList, playlistsRetrieve, schemaRetrieve, tracksList, tracksRetrieve } from "../requests/services.gen";
import { PlaylistsListError, PlaylistsRetrieveData, PlaylistsRetrieveError, SchemaRetrieveData, SchemaRetrieveError, TracksListError, TracksRetrieveData, TracksRetrieveError } from "../requests/types.gen";
import * as Common from "./common";
export const usePlaylistsListSuspense = <TData = Common.PlaylistsListDefaultResponse, TError = PlaylistsListError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UsePlaylistsListKeyFn(clientOptions, queryKey), queryFn: () => playlistsList({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const usePlaylistsRetrieveSuspense = <TData = Common.PlaylistsRetrieveDefaultResponse, TError = PlaylistsRetrieveError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<PlaylistsRetrieveData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UsePlaylistsRetrieveKeyFn(clientOptions, queryKey), queryFn: () => playlistsRetrieve({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useSchemaRetrieveSuspense = <TData = Common.SchemaRetrieveDefaultResponse, TError = SchemaRetrieveError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<SchemaRetrieveData, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseSchemaRetrieveKeyFn(clientOptions, queryKey), queryFn: () => schemaRetrieve({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useTracksListSuspense = <TData = Common.TracksListDefaultResponse, TError = TracksListError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<unknown, true> = {}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseTracksListKeyFn(clientOptions, queryKey), queryFn: () => tracksList({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
export const useTracksRetrieveSuspense = <TData = Common.TracksRetrieveDefaultResponse, TError = TracksRetrieveError, TQueryKey extends Array<unknown> = unknown[]>(clientOptions: Options<TracksRetrieveData, true>, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<TData, TError>, "queryKey" | "queryFn">) => useSuspenseQuery<TData, TError>({ queryKey: Common.UseTracksRetrieveKeyFn(clientOptions, queryKey), queryFn: () => tracksRetrieve({ ...clientOptions }).then(response => response.data as TData) as TData, ...options });
