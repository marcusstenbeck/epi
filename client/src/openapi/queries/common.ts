// generated with @7nohe/openapi-react-query-codegen@2.0.0-beta.2 

import { Options } from "@hey-api/client-fetch";
import { UseQueryResult } from "@tanstack/react-query";
import { playlistsCreate, playlistsDestroy, playlistsList, playlistsPartialUpdate, playlistsRetrieve, playlistsUpdate, schemaRetrieve, tracksCreate, tracksDestroy, tracksList, tracksPartialUpdate, tracksRetrieve, tracksUpdate } from "../requests/services.gen";
export type PlaylistsListDefaultResponse = Awaited<ReturnType<typeof playlistsList>>["data"];
export type PlaylistsListQueryResult<TData = PlaylistsListDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePlaylistsListKey = "PlaylistsList";
export const UsePlaylistsListKeyFn = (clientOptions: Options<unknown, true> = {}, queryKey?: Array<unknown>) => [usePlaylistsListKey, ...(queryKey ?? [clientOptions])];
export type PlaylistsRetrieveDefaultResponse = Awaited<ReturnType<typeof playlistsRetrieve>>["data"];
export type PlaylistsRetrieveQueryResult<TData = PlaylistsRetrieveDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const usePlaylistsRetrieveKey = "PlaylistsRetrieve";
export const UsePlaylistsRetrieveKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [usePlaylistsRetrieveKey, ...(queryKey ?? [clientOptions])];
export type SchemaRetrieveDefaultResponse = Awaited<ReturnType<typeof schemaRetrieve>>["data"];
export type SchemaRetrieveQueryResult<TData = SchemaRetrieveDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useSchemaRetrieveKey = "SchemaRetrieve";
export const UseSchemaRetrieveKeyFn = (clientOptions: Options<unknown, true> = {}, queryKey?: Array<unknown>) => [useSchemaRetrieveKey, ...(queryKey ?? [clientOptions])];
export type TracksListDefaultResponse = Awaited<ReturnType<typeof tracksList>>["data"];
export type TracksListQueryResult<TData = TracksListDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useTracksListKey = "TracksList";
export const UseTracksListKeyFn = (clientOptions: Options<unknown, true> = {}, queryKey?: Array<unknown>) => [useTracksListKey, ...(queryKey ?? [clientOptions])];
export type TracksRetrieveDefaultResponse = Awaited<ReturnType<typeof tracksRetrieve>>["data"];
export type TracksRetrieveQueryResult<TData = TracksRetrieveDefaultResponse, TError = unknown> = UseQueryResult<TData, TError>;
export const useTracksRetrieveKey = "TracksRetrieve";
export const UseTracksRetrieveKeyFn = (clientOptions: Options<unknown, true>, queryKey?: Array<unknown>) => [useTracksRetrieveKey, ...(queryKey ?? [clientOptions])];
export type PlaylistsCreateMutationResult = Awaited<ReturnType<typeof playlistsCreate>>;
export const usePlaylistsCreateKey = "PlaylistsCreate";
export const UsePlaylistsCreateKeyFn = (mutationKey?: Array<unknown>) => [usePlaylistsCreateKey, ...(mutationKey ?? [])];
export type TracksCreateMutationResult = Awaited<ReturnType<typeof tracksCreate>>;
export const useTracksCreateKey = "TracksCreate";
export const UseTracksCreateKeyFn = (mutationKey?: Array<unknown>) => [useTracksCreateKey, ...(mutationKey ?? [])];
export type PlaylistsUpdateMutationResult = Awaited<ReturnType<typeof playlistsUpdate>>;
export const usePlaylistsUpdateKey = "PlaylistsUpdate";
export const UsePlaylistsUpdateKeyFn = (mutationKey?: Array<unknown>) => [usePlaylistsUpdateKey, ...(mutationKey ?? [])];
export type TracksUpdateMutationResult = Awaited<ReturnType<typeof tracksUpdate>>;
export const useTracksUpdateKey = "TracksUpdate";
export const UseTracksUpdateKeyFn = (mutationKey?: Array<unknown>) => [useTracksUpdateKey, ...(mutationKey ?? [])];
export type PlaylistsPartialUpdateMutationResult = Awaited<ReturnType<typeof playlistsPartialUpdate>>;
export const usePlaylistsPartialUpdateKey = "PlaylistsPartialUpdate";
export const UsePlaylistsPartialUpdateKeyFn = (mutationKey?: Array<unknown>) => [usePlaylistsPartialUpdateKey, ...(mutationKey ?? [])];
export type TracksPartialUpdateMutationResult = Awaited<ReturnType<typeof tracksPartialUpdate>>;
export const useTracksPartialUpdateKey = "TracksPartialUpdate";
export const UseTracksPartialUpdateKeyFn = (mutationKey?: Array<unknown>) => [useTracksPartialUpdateKey, ...(mutationKey ?? [])];
export type PlaylistsDestroyMutationResult = Awaited<ReturnType<typeof playlistsDestroy>>;
export const usePlaylistsDestroyKey = "PlaylistsDestroy";
export const UsePlaylistsDestroyKeyFn = (mutationKey?: Array<unknown>) => [usePlaylistsDestroyKey, ...(mutationKey ?? [])];
export type TracksDestroyMutationResult = Awaited<ReturnType<typeof tracksDestroy>>;
export const useTracksDestroyKey = "TracksDestroy";
export const UseTracksDestroyKeyFn = (mutationKey?: Array<unknown>) => [useTracksDestroyKey, ...(mutationKey ?? [])];
